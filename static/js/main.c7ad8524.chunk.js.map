{"version":3,"sources":["components/toggle-emoji/ToggleEmoji.module.css","components/toggle-button/ToggleButton.module.css","App.module.css","components/toggle-controls/ToggleControls.module.css","components/toggle-emoji/ToggleEmoji.js","components/toggle-controls/ToggleControls.js","components/toggle-button/ToggleButton.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","main_div","emoji","emojifade_rev","emoji_animated","emojifade","switchboard","button_icon","button_icon_on","caption","App","ToggleEmoji","props","react_default","a","createElement","className","style","isAnimated","role","aria-label","label","aria-hidden","children","ToggleControls","ToggleButton","currentSet","set","onClick","click","icon","_useState","useState","iconsets","monkey","cat","initialState","Object","slicedToArray","_useState3","index","_useState4","selectedSet","setSelectedSet","_useState5","_useState6","animated","setAnimated","getCurrentEmoji","selectSet","event","target","getAttribute","styles","toggle_emoji_ToggleEmoji","toggle_controls_ToggleControls","toggle_button_ToggleButton","timeout","currentIndex","nextIndex","setTimeout","length","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7ad8524.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_div\":\"ToggleEmoji_main_div__3JpUo\",\"emoji\":\"ToggleEmoji_emoji__3Luy6\",\"emojifade_rev\":\"ToggleEmoji_emojifade_rev__1Ltr8\",\"emoji_animated\":\"ToggleEmoji_emoji_animated__1yv85\",\"emojifade\":\"ToggleEmoji_emojifade__2HrGI\",\"switchboard\":\"ToggleEmoji_switchboard__YFTXZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_div\":\"ToggleButton_main_div__3qvWz\",\"button_icon\":\"ToggleButton_button_icon__1iNZF\",\"button_icon_on\":\"ToggleButton_button_icon_on__FR4mx\",\"caption\":\"ToggleButton_caption__11xtJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3P6qO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_div\":\"ToggleControls_main_div__TGWpf\"};","import React from 'react';\r\nimport style from './ToggleEmoji.module.css';\r\n\r\nconst ToggleEmoji = props => (\r\n    <div className={style.main_div}>\r\n        <span\r\n            className={props.isAnimated ? style.emoji_animated : style.emoji}\r\n            role=\"img\"\r\n            aria-label={props.label ? props.label : \"\"}\r\n            aria-hidden={props.label ? false : true}\r\n        >\r\n            {props.emoji}\r\n        </span>\r\n        <div className={style.switchboard}>\r\n            {\r\n                props.children\r\n            }\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default ToggleEmoji\r\n\r\n\r\n","import React from 'react';\r\nimport style from './ToggleControls.module.css';\r\n\r\nconst ToggleControls = props => (\r\n    <div className={style.main_div}>\r\n        {props.children}\r\n    </div>\r\n)\r\n\r\nexport default ToggleControls","import React, { useState } from 'react';\r\nimport style from './ToggleButton.module.css';\r\n\r\nconst ToggleButton = props => (\r\n    <div className={style.main_div}>\r\n        <span\r\n            className={props.currentSet === props.set ? style.button_icon_on : style.button_icon}\r\n            onClick={props.click}\r\n            icon={props.icon}\r\n            aria-label={props.label ? props.label : \"\"}\r\n            aria-hidden={props.label ? true : false}\r\n            set={props.set}\r\n        >\r\n            {props.icon}\r\n        </span>\r\n        <p className={style.caption}>{props.label}</p>\r\n    </div>\r\n)\r\n\r\nexport default ToggleButton","import React, { useState } from 'react';\nimport styles from './App.module.css';\nimport ToggleEmoji from './components/toggle-emoji/ToggleEmoji';\nimport ToggleControls from './components/toggle-controls/ToggleControls';\nimport ToggleButton from './components/toggle-button/ToggleButton';\n\nconst App = () => {\n\n  const [initialState] = useState({\n    iconsets: {\n      monkey: [\n        '🐵', '🙈', '🙉', '🙊'\n      ],\n      cat: [\n        '🐱', '😸', '😹', '😺', '😻', '😼', '😽', '😾', '😿', '🙀'\n      ]\n    }\n  });\n\n  const [selectedSet, setSelectedSet] = useState({\n    set: \"monkey\",\n    index: 0\n  });\n\n  const [animated, setAnimated] = useState(false);\n\n  const getCurrentEmoji = () => selectedSet.set === \"monkey\" ?\n    initialState.iconsets.monkey[selectedSet.index] :\n    initialState.iconsets.cat[selectedSet.index];\n\n  const animateEmoji = (timeout) => {\n    setAnimated(true);\n    setTimeout(() => setAnimated(false), timeout);\n  }\n\n  const toggleEmoji = () => {\n    let currentIndex = selectedSet.index;\n    let nextIndex = currentIndex;\n\n    animateEmoji(500);\n\n    switch (selectedSet.set) {\n      case \"cat\":\n        nextIndex = ++nextIndex < initialState.iconsets.cat.length ? ++currentIndex : 0;\n        setTimeout(() => setSelectedSet({ set: \"cat\", index: nextIndex }), 500);\n        break;\n      case \"monkey\":\n        nextIndex = ++nextIndex < initialState.iconsets.monkey.length ? ++currentIndex : 0;\n        setTimeout(() => setSelectedSet({ set: \"monkey\", index: nextIndex }), 500);\n        break;\n      default:\n        break;\n    }\n  }\n\n  const selectSet = (event) => {\n    let set = event.target.getAttribute(\"set\");\n    if (set) {\n      setSelectedSet({ set, index: 0 });\n    }\n  }\n\n  return (\n    <div className={styles.App}>\n      <ToggleEmoji emoji={getCurrentEmoji()} label=\"Current emoji\" isAnimated={animated}>\n        <ToggleControls>\n          <ToggleButton icon={getCurrentEmoji()} label=\"Toggle\" click={toggleEmoji} set=\"\"/>\n          <ToggleButton icon=\"🐱\" label=\"Cat\" click={selectSet} set=\"cat\" currentSet={selectedSet.set} />\n          <ToggleButton icon=\"🐵\" label=\"Monkey\" click={selectSet} set=\"monkey\" currentSet={selectedSet.set} />\n        </ToggleControls>\n      </ToggleEmoji>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}